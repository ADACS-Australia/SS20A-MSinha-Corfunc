/* File: countpairs_rp_pi.c */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/


#include <stdio.h>
#include <math.h>
#include <stdlib.h>

#include "countpairs_rp_pi_impl_DOUBLE.h" //function proto-type

#include "defs.h"
#include "utils.h" //all of the utilities
#include "progressbar.h" //for the progressbar
#include "cpu_features.h" //prototype instrset_detect required for runtime dispatch

#include "cellarray_DOUBLE.h" //definition of struct cellarray*
#include "gridlink_impl_DOUBLE.h"//function proto-type for gridlink

#if defined(_OPENMP)
#include <omp.h>
#endif

#include "countpairs_rp_pi_kernels_DOUBLE.c"


countpairs_rp_pi_func_ptr_DOUBLE countpairs_rp_pi_driver_DOUBLE(const struct config_options *options)
{
  static int initialized = 0;
  static countpairs_rp_pi_func_ptr_DOUBLE function = NULL;

  if(initialized == 1) return function;

  //the fastest available code will always be at index 0.
  if(initialized == 0) {
    /* Array of function pointers */
    countpairs_rp_pi_func_ptr_DOUBLE allfunctions[] = {
#ifdef __AVX__
      countpairs_rp_pi_avx_intrinsics_DOUBLE,
#endif			 
#ifdef __SSE4_2__
      countpairs_rp_pi_sse_intrinsics_DOUBLE,
#endif
      countpairs_rp_pi_fallback_DOUBLE
    };

    const int num_functions = sizeof(allfunctions)/sizeof(void *);
    const int fallback_offset = num_functions - 1;
    const int highest_isa = instrset_detect();
    
    int curr_offset = 0;
    
    /* Now check if AVX is supported by the CPU */
    int avx_offset = fallback_offset;
#ifdef __AVX__
    avx_offset = highest_isa >= 7 ? curr_offset:fallback_offset;
    curr_offset++;
#endif        
    
    /* Is the SSE function supported at runtime and enabled at compile-time?*/
    int sse_offset = fallback_offset;
#ifdef __SSE4_2__
    sse_offset = highest_isa >= 6 ? curr_offset:fallback_offset;
    curr_offset++;
#endif
    if( curr_offset != fallback_offset) {
      fprintf(stderr,"ERROR: Bug in code (current offset = %d *should equal* fallback function offset = %d)\n",
              curr_offset, fallback_offset);
      return NULL;
    } 
    
    int function_dispatch=0;
    /* Check that cpu supports feature */
    if(options->instruction_set != 0) {
      switch(options->instruction_set) {
      case(AVX):
        function_dispatch=avx_offset;break;
      case(SSE):function_dispatch=sse_offset;break;
      default:function_dispatch=fallback_offset;break;
      }
    }
    if(function_dispatch >= num_functions) {
      fprintf(stderr,"In %s> ERROR: Could not resolve the correct function.\n Function index = %d must lie between [0, %d)\n",
              __FUNCTION__, function_dispatch, num_functions);
      return NULL;
    }
    function = allfunctions[function_dispatch];
    initialized = 1;
  }

  return function;
}


int countpairs_rp_pi_DOUBLE(const int64_t ND1, DOUBLE *X1, DOUBLE *Y1, DOUBLE *Z1,
                            const int64_t ND2, DOUBLE *X2, DOUBLE *Y2, DOUBLE *Z2,
                            const int numthreads,
                            const int autocorr,
                            const char *binfile,
                            const DOUBLE pimax,
                            results_countpairs_rp_pi *results,
                            const struct config_options *options)
{
    if(options->float_type != sizeof(DOUBLE)) {
        fprintf(stderr,"ERROR: In %s> Can only handle arrays of size=%zu. Got an array of size = %zu\n",
                __FUNCTION__, sizeof(DOUBLE), options->float_type);
        return EXIT_FAILURE;
    }

    int bin_refine_factor=2;
    int zbin_refine_factor=1;
    const int npibin = (int) pimax;

    /***********************
     *initializing the  bins
     ************************/
    double *rupp;
    int nrpbin ;
    double rpmin,rpmax;
    setup_bins(binfile,&rpmin,&rpmax,&nrpbin,&rupp);
    if( ! (rpmin > 0.0 && rpmax > 0.0 && rpmin < rpmax && nrpbin > 0)) {
        fprintf(stderr,"Error: Could not setup with R bins correctly. (rmin = %lf, rmax = %lf, with nbins = %d). Expected non-zero rmin/rmax with rmax > rmin and nbins >=1 \n",
                rpmin, rpmax, nrpbin);
        return EXIT_FAILURE;
    }
    DOUBLE rupp_sqr[nrpbin];
    const int64_t totnbins = (npibin+1)*(nrpbin+1);
    for(int i=0; i < nrpbin;i++) {
        rupp_sqr[i] = rupp[i]*rupp[i];
    }

    const DOUBLE sqr_rpmax=rupp_sqr[nrpbin-1];
    const DOUBLE sqr_rpmin=rupp_sqr[0];
    
    //Find the min/max of the data
    DOUBLE xmin=1e10,ymin=1e10,zmin=1e10;
    DOUBLE xmax=-1e10,ymax=-1e10,zmax=-1e10;
    get_max_min_DOUBLE(ND1, X1, Y1, Z1, &xmin, &ymin, &zmin, &xmax, &ymax, &zmax);

    if(autocorr==0) {
        if(options->verbose) {
            fprintf(stderr,"ND1 = %12"PRId64" [xmin,ymin,zmin] = [%lf,%lf,%lf], [xmax,ymax,zmax] = [%lf,%lf,%lf]\n",ND1,xmin,ymin,zmin,xmax,ymax,zmax);
        }

        get_max_min_DOUBLE(ND2, X2, Y2, Z2, &xmin, &ymin, &zmin, &xmax, &ymax, &zmax);
        if(options->verbose) {
            fprintf(stderr,"ND2 = %12"PRId64" [xmin,ymin,zmin] = [%lf,%lf,%lf], [xmax,ymax,zmax] = [%lf,%lf,%lf]\n",ND2,xmin,ymin,zmin,xmax,ymax,zmax);
        }
    }

    if(options->verbose) {
        fprintf(stderr,"Running with [xmin,xmax] = %lf,%lf\n",xmin,xmax);
        fprintf(stderr,"Running with [ymin,ymax] = %lf,%lf\n",ymin,ymax);
        fprintf(stderr,"Running with [zmin,zmax] = %lf,%lf\n",zmin,zmax);
    }

    const DOUBLE xdiff = (xmax-xmin);
    const DOUBLE ydiff = (ymax-ymin);
    const DOUBLE zdiff = (zmax-zmin);
    if(rpmax < 0.05*xdiff) bin_refine_factor = 1;

    /*---Create 3-D lattice--------------------------------------*/
    int nmesh_x=0,nmesh_y=0,nmesh_z=0;
    cellarray_index_particles_DOUBLE *lattice1 = gridlink_index_particles_DOUBLE(ND1, X1, Y1, Z1, xmin, xmax, ymin, ymax, zmin, zmax, rpmax, rpmax,pimax, bin_refine_factor, bin_refine_factor, zbin_refine_factor, &nmesh_x, &nmesh_y, &nmesh_z, options);
    if(lattice1 == NULL) {
        return EXIT_FAILURE;
    }

    if(nmesh_x <= 10 && nmesh_y <= 10 && nmesh_z <= 10) {
        fprintf(stderr,"countpairs> gridlink seems inefficient - boosting bin refine factor - should lead to better performance\n");
        bin_refine_factor *=2;
        free(lattice1);
        lattice1 = gridlink_index_particles_DOUBLE(ND1, X1, Y1, Z1, xmin, xmax, ymin, ymax, zmin, zmax, rpmax, rpmax, pimax, bin_refine_factor, bin_refine_factor, zbin_refine_factor, &nmesh_x, &nmesh_y, &nmesh_z, options);
        if(lattice1 == NULL) {
            return EXIT_FAILURE;
        }
    }

    cellarray_index_particles_DOUBLE *lattice2 = NULL;
    if(autocorr==0) {
        int ngrid2_x=0,ngrid2_y=0,ngrid2_z=0;
        lattice2 = gridlink_index_particles_DOUBLE(ND2, X2, Y2, Z2, xmin, xmax, ymin, ymax, zmin, zmax, rpmax, rpmax, pimax, bin_refine_factor, bin_refine_factor, zbin_refine_factor, &ngrid2_x, &ngrid2_y, &ngrid2_z, options);
        if(lattice2 == NULL) {
            return EXIT_FAILURE;
        }
        if( ! (nmesh_x == ngrid2_x && nmesh_y == ngrid2_y && nmesh_z == ngrid2_z) ) {
            fprintf(stderr,"Error: The two sets of 3-D lattices do not have identical bins. First has dims (%d, %d, %d) while second has (%d, %d, %d)\n",
                    nmesh_x, nmesh_y, nmesh_z, ngrid2_x, ngrid2_y, ngrid2_z);
            return EXIT_FAILURE;
        }
    } else {
        lattice2 = lattice1;
    }
    const int64_t totncells = (int64_t) nmesh_x * (int64_t) nmesh_y * (int64_t) nmesh_z;

    //Generate the unique set of neighbouring cells to count over. 
    assign_ngb_cells_index_particles_DOUBLE(lattice1, lattice2, totncells, bin_refine_factor, bin_refine_factor, zbin_refine_factor, nmesh_x, nmesh_y, nmesh_z, xdiff, ydiff, zdiff, autocorr, options->periodic);

    /* runtime dispatch - get the function pointer */
    countpairs_rp_pi_func_ptr_DOUBLE countpairs_rp_pi_function_DOUBLE = countpairs_rp_pi_driver_DOUBLE(options);
    if(countpairs_rp_pi_function_DOUBLE == NULL) {
        return EXIT_FAILURE;
    }
    

#if defined(_OPENMP)
    omp_set_num_threads(numthreads);
    uint64_t **all_npairs = (uint64_t **) matrix_calloc(sizeof(uint64_t), numthreads, totnbins);
    DOUBLE **all_rpavg = NULL;
    if(options->need_avg_sep) {
        all_rpavg = (DOUBLE **) matrix_calloc(sizeof(DOUBLE),numthreads,totnbins);
    }
#else
    uint64_t npairs[totnbins];
    DOUBLE rpavg[totnbins];
    for(int ibin=0;ibin<totnbins;ibin++) {
        npairs[ibin]=0;
        if(options->need_avg_sep) {
            rpavg[ibin] = ZERO;
        }
    }
#endif//OMP



    int interrupted=0, abort_status = EXIT_SUCCESS;
    int64_t numdone=0;
    if(options->verbose) {
        init_my_progressbar(totncells,&interrupted);
    }

#if defined(_OPENMP)
#pragma omp parallel shared(numdone, abort_status)
    {
        const int tid = omp_get_thread_num();
        uint64_t npairs[totnbins];
        DOUBLE rpavg[totnbins];
        for(int i=0;i<totnbins;i++) {
            npairs[i] = 0;
            if(options->need_avg_sep) {
                rpavg[i] = ZERO;
            }
        }

#pragma omp for  schedule(dynamic) nowait
#endif
        /*---Loop-over-lattice1--------------------*/
        for(int64_t index1=0;index1<totncells;index1++) {

#if defined(_OPENMP)
#pragma omp flush (abort_status)
#endif
            if(abort_status == EXIT_SUCCESS) { //omp cancel was introduced in omp 4.0 - so this is my way of checking if loop needs to be cancelled
                
                /* If the verbose option is not enabled, avoid outputting anything unnecessary*/
                if(options->verbose) {
#if defined(_OPENMP)
                    if (omp_get_thread_num() == 0)
#endif
                        my_progressbar(numdone,&interrupted);
                    
                    
#if defined(_OPENMP)
#pragma omp atomic
#endif
                    numdone++;
                }


                /* Calculate over all ngb cells */
                const cellarray_index_particles_DOUBLE *first  = &(lattice1[index1]);
                if(first->nelements == 0) {
                    continue;
                }
                DOUBLE *x1 = first->x;
                DOUBLE *y1 = first->y;
                DOUBLE *z1 = first->z;
                const int64_t N1 = first->nelements;
                if(autocorr == 1) {
                    int same_cell = 1;
                    DOUBLE *this_rpavg = NULL;
                    if(options->need_avg_sep) {
                        this_rpavg = rpavg;
                    }
                    const int status = countpairs_rp_pi_function_DOUBLE(N1, x1, y1, z1,
                                                                        N1, x1, y1, z1,
                                                                        same_cell
                                                                        ,sqr_rpmax, sqr_rpmin, nrpbin, npibin, rupp_sqr, pimax
                                                                        ,ZERO, ZERO, ZERO
                                                                        ,this_rpavg, npairs);
                    /* This actually causes a race condition under OpenMP - but mostly
                       I care that an error occurred - rather than the exact value of
                       the error status */
                    abort_status |= status;
                }
                for(int64_t ngb=0;ngb<first->num_ngb;ngb++){
                    const cellarray_index_particles_DOUBLE *second = first->ngb_cells[ngb];
                    if(second->nelements == 0) {
                        continue;
                    }
                    const int same_cell = 0;
                    DOUBLE *x2 = second->x;
                    DOUBLE *y2 = second->y;
                    DOUBLE *z2 = second->z;
                    DOUBLE off_xwrap = 0.0, off_ywrap = 0.0, off_zwrap = 0.0;
                    if(options->periodic) {
                        off_xwrap = first->xwrap[ngb];
                        off_ywrap = first->ywrap[ngb];
                        off_zwrap = first->zwrap[ngb];
                    }
                    const int64_t N2 = second->nelements;
                    DOUBLE *this_rpavg = NULL;
                    if(options->need_avg_sep) {
                        this_rpavg = rpavg;
                    }
                    const int status = countpairs_rp_pi_function_DOUBLE(N1, x1, y1, z1,
                                                                        N2, x2, y2, z2, same_cell,
                                                                        sqr_rpmax, sqr_rpmin, nrpbin, npibin, rupp_sqr, pimax,
                                                                        off_xwrap, off_ywrap, off_zwrap,
                                                                        this_rpavg, npairs);
                    /* This actually causes a race condition under OpenMP - but mostly
                       I care that an error occurred - rather than the exact value of
                       the error status */
                    abort_status |= status;
                }//loop over ngb cells
            }
        }//index1 loop over totncells
        
#if defined(_OPENMP)
        for(int i=0;i<totnbins;i++) {
            all_npairs[tid][i] = npairs[i];
            if(options->need_avg_sep) {
                all_rpavg[tid][i] = rpavg[i];
            }
        }
    }//close the omp parallel region
#endif

    free_cellarray_index_particles_DOUBLE(lattice1,totncells);
    if(autocorr == 0) {
        free_cellarray_index_particles_DOUBLE(lattice2,totncells);
    }
    
    if(options->verbose) {
        finish_myprogressbar(&interrupted);
    }
        

    if(abort_status != EXIT_SUCCESS) {
        /* Cleanup memory here if aborting */
        free(rupp);
#if defined(_OPENMP)
        matrix_free((void **) all_npairs, numthreads);
        if(options->need_avg_sep) {
            matrix_free((void **) all_rpavg, numthreads);
        }
#endif
        return EXIT_FAILURE;
    }

    
#if defined(_OPENMP)
    uint64_t npairs[totnbins];
    DOUBLE rpavg[totnbins];
    for(int i=0;i<totnbins;i++) {
        npairs[i] = 0;
        if(options->need_avg_sep) {
            rpavg[i] = 0.0;
        }
    }

    for(int i=0;i<numthreads;i++) {
        for(int j=0;j<totnbins;j++) {
            npairs[j] += all_npairs[i][j];
            if(options->need_avg_sep) {
                rpavg[j] += all_rpavg[i][j];
            }
        }
    }
    matrix_free((void **) all_npairs, numthreads);
    if(options->need_avg_sep) {
        matrix_free((void **) all_rpavg, numthreads);
    }
#endif


    //The code does not double count for autocorrelations
    //which means the npairs and rpavg values need to be doubled;
    if(autocorr == 1) {
        const uint64_t int_fac = 2;
        const DOUBLE dbl_fac = (DOUBLE) 2.0;
        for(int i=0;i<totnbins;i++) {
            npairs[i] *= int_fac;
            if(options->need_avg_sep) {
                rpavg[i] *= dbl_fac;
            }
        }
    }

    
    if(options->need_avg_sep) {
        for(int i=0;i<totnbins;i++){
            if(npairs[i] > 0) {
                rpavg[i] /= ((DOUBLE) npairs[i] );
            }
        }
    }


    //Pack in the results
    results->nbin   = nrpbin;
    results->npibin = npibin;
    results->pimax  = pimax;
    results->npairs = my_malloc(sizeof(uint64_t), totnbins);
    results->rupp   = my_malloc(sizeof(DOUBLE)  , nrpbin);
    results->rpavg  = my_malloc(sizeof(DOUBLE)  , totnbins);

    for(int i=0;i<nrpbin;i++) {
        results->rupp[i] = rupp[i];
        for(int j=0;j<npibin;j++) {
            int index = i*((int64_t) npibin+1) + j;
            if(index < 0 || index >= totnbins) {
                fprintf(stderr,"ERROR: In %s> Bin index = %d must lie within range [0, %"PRId64") (possible int overflow)\n",
                        __FUNCTION__, index, totnbins);
                return EXIT_FAILURE;
            }

            results->npairs[index] = npairs[index];
            results->rpavg[index] = 0.0;
            if(options->need_avg_sep){
                results->rpavg[index] = rpavg[index];
            }
        }
    }

    free(rupp);
    
    return EXIT_SUCCESS;
}
